/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ahospitalmanagment;

import actors.patient;
import connections.patientConnect;
import java.util.List;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Dinithi
 */
public class patientView extends javax.swing.JFrame {

    /**
     * Creates new form patientView
     */
    public patientView() {
        initComponents();
        loadDataToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonBack = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("View Patient Booking Details");

        jLabelSearch.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabelSearch.setForeground(new java.awt.Color(51, 0, 102));
        jLabelSearch.setText("Search");

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        jTable1.setForeground(new java.awt.Color(51, 0, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Full Name", "Phone Number", "Email", "Address", "Date", "Doctor Name", "Comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButtonBack.setBackground(new java.awt.Color(51, 0, 102));
        jButtonBack.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jButtonBack.setForeground(new java.awt.Color(204, 204, 204));
        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(51, 0, 102));
        jButtonDelete.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jButtonDelete.setForeground(new java.awt.Color(204, 204, 204));
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(51, 0, 102));
        jButtonUpdate.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jButtonUpdate.setForeground(new java.awt.Color(204, 204, 204));
        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabelSearch)
                        .addGap(46, 46, 46)
                        .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 914, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonUpdate)
                .addGap(32, 32, 32)
                .addComponent(jButtonDelete)
                .addGap(28, 28, 28)
                .addComponent(jButtonBack)
                .addGap(52, 52, 52))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSearch)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBack)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonUpdate))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
        String searchText = jTextFieldSearch.getText().toLowerCase(); // Get the search text and convert to lowercase
        patientConnect PatientConnect = new patientConnect();
        List<patient> loadPatient = PatientConnect.loadPatient();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows in the table
        
        boolean found = false; // Flag to check if any patient booking details is found

         
        for (patient patient : loadPatient) {
            if (patient.getFullName().toLowerCase().contains(searchText)
                    || patient.getPhone().toLowerCase().contains(searchText)
                    || patient.getEmail().toLowerCase().contains(searchText)
                    || patient.getAddress().toLowerCase().contains(searchText)
                    || patient.getDate().toLowerCase().contains(searchText)
                    || patient.getDoctorName().toLowerCase().contains(searchText)
                    || patient.getComments().toLowerCase().contains(searchText)) {
                // Add the matching item to the table
                model.addRow(new Object[]{patient.getFullName(), patient.getPhone(), patient.getEmail(), patient.getAddress(), patient.getDate(), patient.getDoctorName(), patient.getComments()});
                found = true;
            }
        }
        if (!found) {
        // Show "Not Found" message
        javax.swing.JOptionPane.showMessageDialog(this, "Patient booking details not found.", "Search Result", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    
    if (selectedRow == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please select a patient to delete.");
        return;
    }
    
    int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this patient?", "Confirm Deletion", javax.swing.JOptionPane.YES_NO_OPTION);
    
    if (confirm == javax.swing.JOptionPane.YES_OPTION) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String patientName = model.getValueAt(selectedRow, 0).toString(); // Get doctor name
        
        // Remove from database
        patientConnect PatientConnect = new patientConnect();
        boolean success = PatientConnect.deletePatient(patientName);
        
        if (success) {
            model.removeRow(selectedRow); // Remove from table
            javax.swing.JOptionPane.showMessageDialog(this, "Patient deleted successfully.");
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Error deleting patient.");
        }
    }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a patient to update.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    
    // Get selected patient details
    String fullName = model.getValueAt(selectedRow, 0).toString();
    String phone = model.getValueAt(selectedRow, 1).toString();
    String email = model.getValueAt(selectedRow, 2).toString();
    String address = model.getValueAt(selectedRow, 3).toString();
    String date = model.getValueAt(selectedRow, 4).toString();
    String doctorName = model.getValueAt(selectedRow, 5).toString();
    String comments = model.getValueAt(selectedRow, 6).toString();

    // Show an input dialog for updating details
    String newPhone = javax.swing.JOptionPane.showInputDialog(this, "Update Phone Number:", phone);
    String newEmail = javax.swing.JOptionPane.showInputDialog(this, "Update Email:", email);
    String newAddress = javax.swing.JOptionPane.showInputDialog(this, "Update Address:", address);
    String newDate = javax.swing.JOptionPane.showInputDialog(this, "Update Date:", date);
    String newDoctorName = javax.swing.JOptionPane.showInputDialog(this, "Update Doctor Name:", doctorName);
    String newComments = javax.swing.JOptionPane.showInputDialog(this, "Update Comments:", comments);

    // Update the database
    patientConnect PatientConnect = new patientConnect();
    boolean success = PatientConnect.updatePatientFile(fullName, newPhone, newEmail, newAddress, newDate, newDoctorName, newComments);

    if (success) {
        // Update table
        model.setValueAt(newPhone, selectedRow, 1);
        model.setValueAt(newEmail, selectedRow, 2);
        model.setValueAt(newAddress, selectedRow, 3);
        model.setValueAt(newDate, selectedRow, 4);
        model.setValueAt(newDoctorName, selectedRow, 5);
        model.setValueAt(newComments, selectedRow, 6);

        javax.swing.JOptionPane.showMessageDialog(this, "Patient details updated successfully.");
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Error updating patient details.");
    }
   

    }//GEN-LAST:event_jButtonUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(patientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(patientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(patientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(patientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new patientView().setVisible(true);
            }
        });
    }
    
    private void loadDataToTable() {
        patientConnect PatientConnect = new patientConnect();
        List<patient> loadPatient = PatientConnect.loadPatient();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows in the table

        // Add each item to the table
        for (patient patient : loadPatient) {
            model.addRow(new Object[]{patient.getFullName(), patient.getPhone(), patient.getEmail(), patient.getAddress(), patient.getDate(), patient.getDoctorName(), patient.getComments()});
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
